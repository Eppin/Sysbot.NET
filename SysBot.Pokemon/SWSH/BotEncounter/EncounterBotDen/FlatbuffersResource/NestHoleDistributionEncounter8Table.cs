// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatbuffersResource
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct NestHoleDistributionEncounter8Table : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static NestHoleDistributionEncounter8Table GetRootAsNestHoleDistributionEncounter8Table(ByteBuffer _bb) { return GetRootAsNestHoleDistributionEncounter8Table(_bb, new NestHoleDistributionEncounter8Table()); }
  public static NestHoleDistributionEncounter8Table GetRootAsNestHoleDistributionEncounter8Table(ByteBuffer _bb, NestHoleDistributionEncounter8Table obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NestHoleDistributionEncounter8Table __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong TableID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public uint GameVersion { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public sbyte Field02 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public sbyte Field03 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public FlatbuffersResource.NestHoleDistributionEncounter8? Entries(int j) { int o = __p.__offset(12); return o != 0 ? (FlatbuffersResource.NestHoleDistributionEncounter8?)(new FlatbuffersResource.NestHoleDistributionEncounter8()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EntriesLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatbuffersResource.NestHoleDistributionEncounter8Table> CreateNestHoleDistributionEncounter8Table(FlatBufferBuilder builder,
      ulong TableID = 0,
      uint GameVersion = 0,
      sbyte Field_02 = 0,
      sbyte Field_03 = 0,
      VectorOffset EntriesOffset = default(VectorOffset)) {
    builder.StartTable(5);
    NestHoleDistributionEncounter8Table.AddTableID(builder, TableID);
    NestHoleDistributionEncounter8Table.AddEntries(builder, EntriesOffset);
    NestHoleDistributionEncounter8Table.AddGameVersion(builder, GameVersion);
    NestHoleDistributionEncounter8Table.AddField03(builder, Field_03);
    NestHoleDistributionEncounter8Table.AddField02(builder, Field_02);
    return NestHoleDistributionEncounter8Table.EndNestHoleDistributionEncounter8Table(builder);
  }

  public static void StartNestHoleDistributionEncounter8Table(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTableID(FlatBufferBuilder builder, ulong TableID) { builder.AddUlong(0, TableID, 0); }
  public static void AddGameVersion(FlatBufferBuilder builder, uint GameVersion) { builder.AddUint(1, GameVersion, 0); }
  public static void AddField02(FlatBufferBuilder builder, sbyte Field02) { builder.AddSbyte(2, Field02, 0); }
  public static void AddField03(FlatBufferBuilder builder, sbyte Field03) { builder.AddSbyte(3, Field03, 0); }
  public static void AddEntries(FlatBufferBuilder builder, VectorOffset EntriesOffset) { builder.AddOffset(4, EntriesOffset.Value, 0); }
  public static VectorOffset CreateEntriesVector(FlatBufferBuilder builder, Offset<FlatbuffersResource.NestHoleDistributionEncounter8>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEntriesVectorBlock(FlatBufferBuilder builder, Offset<FlatbuffersResource.NestHoleDistributionEncounter8>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEntriesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatbuffersResource.NestHoleDistributionEncounter8Table> EndNestHoleDistributionEncounter8Table(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatbuffersResource.NestHoleDistributionEncounter8Table>(o);
  }
};


}
