// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatbuffersResource
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EncounterNest8Table : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EncounterNest8Table GetRootAsEncounterNest8Table(ByteBuffer _bb) { return GetRootAsEncounterNest8Table(_bb, new EncounterNest8Table()); }
  public static EncounterNest8Table GetRootAsEncounterNest8Table(ByteBuffer _bb, EncounterNest8Table obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EncounterNest8Table __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong TableID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public uint GameVersion { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public FlatbuffersResource.EncounterNest8? Entries(int j) { int o = __p.__offset(8); return o != 0 ? (FlatbuffersResource.EncounterNest8?)(new FlatbuffersResource.EncounterNest8()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EntriesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatbuffersResource.EncounterNest8Table> CreateEncounterNest8Table(FlatBufferBuilder builder,
      ulong TableID = 0,
      uint GameVersion = 0,
      VectorOffset EntriesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    EncounterNest8Table.AddTableID(builder, TableID);
    EncounterNest8Table.AddEntries(builder, EntriesOffset);
    EncounterNest8Table.AddGameVersion(builder, GameVersion);
    return EncounterNest8Table.EndEncounterNest8Table(builder);
  }

  public static void StartEncounterNest8Table(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTableID(FlatBufferBuilder builder, ulong TableID) { builder.AddUlong(0, TableID, 0); }
  public static void AddGameVersion(FlatBufferBuilder builder, uint GameVersion) { builder.AddUint(1, GameVersion, 0); }
  public static void AddEntries(FlatBufferBuilder builder, VectorOffset EntriesOffset) { builder.AddOffset(2, EntriesOffset.Value, 0); }
  public static VectorOffset CreateEntriesVector(FlatBufferBuilder builder, Offset<FlatbuffersResource.EncounterNest8>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEntriesVectorBlock(FlatBufferBuilder builder, Offset<FlatbuffersResource.EncounterNest8>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEntriesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatbuffersResource.EncounterNest8Table> EndEncounterNest8Table(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatbuffersResource.EncounterNest8Table>(o);
  }
};


}
